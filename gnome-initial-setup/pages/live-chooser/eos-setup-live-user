#!/usr/bin/env python3
# eos-setup-live-user - adds eos-installer icons to a newly-created account
# Copyright (C) 2016-2017 Endless Mobile, Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import argparse
import glob
import json
import logging
import os
import subprocess
import sys
import tempfile

from gi.repository import GLib, Gio

log = logging.getLogger(sys.argv[0])

ICON_GRID_DIR = '/var/eos-image-defaults/icon-grid'

DESKTOP_GRID_ID = 'desktop'

EOS_INSTALLER = 'eos-installer.desktop'
GDM_APPS_DIR = '/usr/share/gdm/greeter/applications'
EOS_INSTALLER_PATH = os.path.join(GDM_APPS_DIR, EOS_INSTALLER)

GOOGLE_CHROME = 'google-chrome.desktop'
CHROMIUM_BROWSER = 'chromium-browser.desktop'

SHELL_SCHEMA = 'org.gnome.shell'
TASKBAR_PINS = 'taskbar-pins'

GS_SCHEMA = 'org.gnome.software'
ALLOW_UPDATES = 'allow-updates'

class SettingsUpdates(object):
    def __init__(self, schema):
        self._settings = Gio.Settings(schema=schema)
        self._updates = {}

    def get_settings(self):
        return self._settings

    def set(self, key, value):
        self._updates[key] = value

    def to_keyfile_str(self):
        schema_id = self._settings.get_property('schema-id')
        keyfile_lines = '[{}]\n'.format(schema_id.replace('.', '/'))

        for k, v in self._updates.items():
            if k is None:
                continue
            keyfile_lines += '{}={}\n'.format(k, v.print_(False))
        return keyfile_lines

    def apply(self):
        for key, value in self._updates.items():
            self._settings.set_value(key, value)

class SetupLiveUser(object):
    def __init__(self):
        self.updates = {SHELL_SCHEMA: SettingsUpdates(SHELL_SCHEMA),
                        GS_SCHEMA: SettingsUpdates(GS_SCHEMA)}

    def update(self, schema, key, variant):
        log.info('Updating {}: {} to {}'.format(schema, key, variant.print_(False)))
        self.updates[schema].set(key, variant)

    def format_keyfile(self):
        keyfile_lines = []
        for updates in self.updates.values():
            keyfile_lines.append(updates.to_keyfile_str())

        return '\n'.join(keyfile_lines)

    def prepare(self):
        self.add_symlink()
        self.update_taskbar_pins()
        self.disallow_app_center_updates()

    def write_gsettings(self):
        '''Write changed settings using GSettings. This seems like the obvious
        thing to do, of course, but does not work when pkexec'd by g-i-s:
        dconf writes happen in a dedicated process, which is service activated
        over D-Bus; but the pkexec environment has no session bus, and no X11
        connection with which to auto-launch one. Interestingly there seems to
        be no way to get an error out of GSettings â€“ you get nice warnings on
        the console, but nothing here.'''
        for updates in self.updates.values():
            updates.apply()

    def write_dconf_compile(self):
        '''This is a bit roundabout, and depends on the knowledge that the user
        database lives at $XDG_CONFIG_HOME/dconf/user, but has the advantage
        of actually working when there's no session bus.'''
        keyfile_contents = self.format_keyfile()

        with tempfile.TemporaryDirectory(suffix='.d') as d:
            keyfile = os.path.join(d, '00-live')
            log.info('writing keyfile to %s', keyfile)
            with open(keyfile, 'w') as f:
                f.write(keyfile_contents)

            user_dconf_dir = os.path.join(GLib.get_user_config_dir(), 'dconf')
            log.info('ensuring %s exists', user_dconf_dir)
            os.makedirs(user_dconf_dir, exist_ok=True)

            user_dconf = os.path.join(user_dconf_dir, 'user')
            if os.path.exists(user_dconf):
                log.error('%s already exists, refusing to overwrite it',
                          user_dconf)
                raise SystemExit(1)

            args = ['dconf', 'compile', user_dconf, d]
            log.info('$ %s', ' '.join(args))
            subprocess.check_call(args)

    def write_stdout(self):
        '''Just write the keyfile used by `dconf compile` to stdout.
        For debugging purposes only.'''
        print(self.format_keyfile())

    def add_symlink(self):
        """eos-installer is shipped in all images, but its desktop file is
        (deliberately) only present in the GDM greeter's environment. For
        image-booted live sessions, we symlink it into place."""
        user_apps_dir = os.path.join(GLib.get_user_data_dir(), 'applications')
        user_desktop_path = os.path.join(user_apps_dir, EOS_INSTALLER)

        if not os.path.exists(user_desktop_path):
            log.info('ensuring %s exists', user_apps_dir)
            os.makedirs(user_apps_dir, exist_ok=True)

            log.info('symlinking %s to %s', EOS_INSTALLER, user_desktop_path)
            os.symlink(EOS_INSTALLER_PATH, user_desktop_path)

    def update_taskbar_pins(self):
        updates = self.updates[SHELL_SCHEMA]
        taskbar_pins = updates.get_settings().get_strv(TASKBAR_PINS)
        changed = False

        # Prepend installer icon
        if EOS_INSTALLER not in taskbar_pins:
            taskbar_pins.insert(0, EOS_INSTALLER)
            changed = True

        # Replace Chrome (downloaded on demand) with Chromium (pre-installed).
        # This effectively undoes a step taken in the image builder,
        # pre-seeding /var/eos-image-defaults/settings with the opposite
        # change.
        if GOOGLE_CHROME in taskbar_pins:
            i = taskbar_pins.index(GOOGLE_CHROME)
            taskbar_pins[i] = CHROMIUM_BROWSER
            changed = True

        if changed:
            self.update(SHELL_SCHEMA, TASKBAR_PINS,
                        GLib.Variant('as', taskbar_pins))

    def disallow_app_center_updates (self):
        self.update(GS_SCHEMA, ALLOW_UPDATES, GLib.Variant('b', False))


def dq(s):
    return '"{}"'.format(s)


def remove_chrome_from_icon_grids():
    log.info("Restoring Chromium to icon grids, if needed")

    pattern = os.path.join(ICON_GRID_DIR, 'icon-grid-*.json')
    for path in glob.glob(pattern):
        log.info("Checking %s", path)
        try:
            with open(path, 'r') as f:
                grid = f.read()

            if GOOGLE_CHROME in grid:
                log.info("Updating %s", path)
                grid = grid.replace(dq(GOOGLE_CHROME), dq(CHROMIUM_BROWSER))

                with open(path, 'w') as f:
                    f.write(grid)
        except:
            log.exception("while processing %s", path)


def prepend_installer_to_icon_grid():
    log.info("Adding installer icon to the desktop")

    pattern = os.path.join(ICON_GRID_DIR, 'icon-grid-prepend-*.json')
    c_path = os.path.join(ICON_GRID_DIR, 'icon-grid-prepend-C.json')
    paths = glob.glob(pattern)
    if c_path not in paths:
        paths.append(c_path)

    for path in paths:
        try:
            try:
                with open(path, 'r') as f:
                    log.info("reading existing file %s", path)
                    grid = json.load(fp=f)
            except FileNotFoundError:
                log.info("%s doesn't exist (as expected)", path)
                grid = {}

            desktop = grid.setdefault(DESKTOP_GRID_ID, [])
            if EOS_INSTALLER not in desktop:
                desktop.insert(0, EOS_INSTALLER)

                log.info("Writing %s: %s", path, json.dumps(obj=grid))
                with open(path, 'w') as f:
                    json.dump(obj=grid, fp=f)
        except:
            log.exception("while processing %s", path)


def main():
    p = argparse.ArgumentParser(
        description='Configures system and user settings for live session')
    subparsers = p.add_subparsers(title='modes', dest='mode')

    user = subparsers.add_parser(
        'user',
        description='description',
        help='Configure a user account. '
             'Should be executed as the target user.')
    user.add_argument(
        '-o', '--output',
        choices=('gsettings', 'dconf-compile', 'stdout'),
        help='Write new settings via GSettings, via `dconf compile`, or '
             'as a keyfile to stdout (default: dconf-compile).  '
             'Note that "--output gsettings" will fail if run outside a '
             'user session, and "--output dconf-compile" will fail if '
             'the user has ever logged in.',
        default='dconf-compile')

    subparsers.add_parser(
        'system',
        help='Makes system-wide changes for live session. Should be executed '
             'as root.')

    a = p.parse_args()

    logging.basicConfig(
        level=logging.INFO,
        format='%(name)s:%(lineno)-3s %(funcName)20s %(levelname)7s: '
               '%(message)s')

    if a.mode == 'user':
        setup = SetupLiveUser()
        setup.prepare()

        if a.output == 'gsettings':
            setup.write_gsettings()
        elif a.output == 'dconf-compile':
            setup.write_dconf_compile()
        elif a.output == 'stdout':
            setup.write_stdout()
        else:
            raise Exception('Unexpected --output value ' + a.output)
    elif a.mode == 'system':
        remove_chrome_from_icon_grids()
        prepend_installer_to_icon_grid()


if __name__ == '__main__':
    main()
